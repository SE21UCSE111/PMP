{"ast":null,"code":"import React,{useState,useContext,useEffect}from\"react\";import Modal from\"react-modal\";// Modal library\nimport{useParams,useNavigate}from\"react-router-dom\";import{StudentContext}from\"./StudentContext\";import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function ProjectList(){const{username}=useParams();const navigate=useNavigate();const{studentProjects,addStudentProject}=useContext(StudentContext);const[projects,setProjects]=useState([]);const[isModalOpen,setIsModalOpen]=useState(false);const[selectedProject,setSelectedProject]=useState(null);const[teamMembers,setTeamMembers]=useState([\"\",\"\",\"\",\"\"]);// 4 fields for team members\nconst[errors,setErrors]=useState([\"\",\"\",\"\",\"\"]);// To track input errors\nconst[loggedInUser,setLoggedInUser]=useState(\"\");// Track the logged-in user\nuseEffect(()=>{// You can pass the logged-in user's username here\nconst usernameFromStorage=localStorage.getItem(\"username\");// Adjust according to where you get the logged-in user's username\nsetLoggedInUser(usernameFromStorage||\"\");// Set it to an empty string if not found\nfetch(\"http://localhost:8000/api/view-projects/\".concat(username,\"/\"),{method:\"GET\",credentials:\"include\"}).then(response=>response.json()).then(data=>{if(data.status===\"success\"){setProjects(data.projects);}else{console.error(\"Error fetching projects:\",data.message);}}).catch(error=>console.error(\"Network error:\",error));},[username]);const openModal=project=>{setSelectedProject(project);setIsModalOpen(true);};const closeModal=()=>{setIsModalOpen(false);setTeamMembers([\"\",\"\",\"\",\"\"]);setErrors([\"\",\"\",\"\",\"\"]);// Clear errors\n};const handleInputChange=(index,value)=>{const updatedMembers=[...teamMembers];updatedMembers[index]=value;setTeamMembers(updatedMembers);setErrors(prev=>{const updatedErrors=[...prev];updatedErrors[index]=\"\";// Reset the error on input change\nreturn updatedErrors;});};const validateMembers=async()=>{const newErrors=[...errors];let allValid=true;// Validate each member via backend\nfor(let i=0;i<teamMembers.length;i++){const member=teamMembers[i];if(member){try{const response=await fetch(\"http://localhost:8000/api/validate-student/?username=\".concat(member),{method:\"GET\",credentials:\"include\"});const data=await response.json();if(!data.exists){newErrors[i]=\"Student \".concat(member,\" does not exist.\");allValid=false;}}catch(error){console.error(\"Error validating student:\",error);}}}setErrors(newErrors);return allValid;};const handleSubmitTeam=async()=>{var _document$cookie$matc;// Ensure the logged-in user is added to the team if not already included\nif(!teamMembers.includes(loggedInUser)){// If the logged-in user has not typed their name, throw an error\nalert(\"You must include your name in the team list.\");return;// Stop the submission\n}const isValid=await validateMembers();if(!isValid){alert(\"Please fix the errors before submitting.\");return;}const formData=new FormData();formData.append(\"project_id\",selectedProject.id);// Remove the logged-in user from the teamMembers array check, as it's handled by the backend.\nteamMembers.forEach((member,index)=>{if(member){formData.append(\"member\".concat(index+1),member);}});fetch(\"http://localhost:8000/api/create-team/\",{method:\"POST\",body:formData,credentials:\"include\",headers:{\"X-CSRFToken\":(_document$cookie$matc=document.cookie.match(/csrftoken=([^;]+)/))===null||_document$cookie$matc===void 0?void 0:_document$cookie$matc[1]// Include CSRF token\n}}).then(response=>response.json()).then(data=>{if(data.success){alert(\"Team created successfully!\");addStudentProject(selectedProject);closeModal();}else{console.error(\"Error:\",data.message);alert(\"Failed to create team.\");}}).catch(error=>console.error(\"Error:\",error));};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"20px\"},children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Projects for \",username]}),/*#__PURE__*/_jsx(\"div\",{children:projects.map(project=>/*#__PURE__*/_jsxs(\"div\",{style:{margin:\"10px 0\",padding:\"10px\",border:\"1px solid #ccc\"},children:[/*#__PURE__*/_jsx(\"h2\",{children:project.name}),/*#__PURE__*/_jsx(\"p\",{children:project.description}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>openModal(project),children:\"Make Team\"})]},project.id))}),/*#__PURE__*/_jsxs(Modal,{isOpen:isModalOpen,onRequestClose:closeModal,contentLabel:\"Team Modal\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Create Team for \",selectedProject===null||selectedProject===void 0?void 0:selectedProject.name]}),[0,1,2,3].map(index=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Team Member \",index+1,\":\"]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:teamMembers[index],onChange:e=>handleInputChange(index,e.target.value)}),errors[index]&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\"},children:errors[index]})]},index)),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmitTeam,children:\"Submit Team\"}),/*#__PURE__*/_jsx(\"button\",{onClick:closeModal,children:\"Close\"})]})]});}export default ProjectList;","map":{"version":3,"names":["React","useState","useContext","useEffect","Modal","useParams","useNavigate","StudentContext","jsxs","_jsxs","jsx","_jsx","ProjectList","username","navigate","studentProjects","addStudentProject","projects","setProjects","isModalOpen","setIsModalOpen","selectedProject","setSelectedProject","teamMembers","setTeamMembers","errors","setErrors","loggedInUser","setLoggedInUser","usernameFromStorage","localStorage","getItem","fetch","concat","method","credentials","then","response","json","data","status","console","error","message","catch","openModal","project","closeModal","handleInputChange","index","value","updatedMembers","prev","updatedErrors","validateMembers","newErrors","allValid","i","length","member","exists","handleSubmitTeam","_document$cookie$matc","includes","alert","isValid","formData","FormData","append","id","forEach","body","headers","document","cookie","match","success","style","padding","children","map","margin","border","name","description","onClick","isOpen","onRequestClose","contentLabel","type","onChange","e","target","color"],"sources":["C:/Users/vssns/Downloads/PMP/myproject2/frontend/src/components/ProjectList.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport Modal from \"react-modal\"; // Modal library\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { StudentContext } from \"./StudentContext\";\r\n\r\nfunction ProjectList() {\r\n  const { username } = useParams();\r\n  const navigate = useNavigate();\r\n  const { studentProjects, addStudentProject } = useContext(StudentContext);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [teamMembers, setTeamMembers] = useState([\"\", \"\", \"\", \"\"]); // 4 fields for team members\r\n  const [errors, setErrors] = useState([\"\", \"\", \"\", \"\"]); // To track input errors\r\n  const [loggedInUser, setLoggedInUser] = useState(\"\"); // Track the logged-in user\r\n\r\n  useEffect(() => {\r\n    // You can pass the logged-in user's username here\r\n    const usernameFromStorage = localStorage.getItem(\"username\"); // Adjust according to where you get the logged-in user's username\r\n    setLoggedInUser(usernameFromStorage || \"\"); // Set it to an empty string if not found\r\n\r\n    fetch(`http://localhost:8000/api/view-projects/${username}/`, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.status === \"success\") {\r\n          setProjects(data.projects);\r\n        } else {\r\n          console.error(\"Error fetching projects:\", data.message);\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Network error:\", error));\r\n  }, [username]);\r\n\r\n  const openModal = (project) => {\r\n    setSelectedProject(project);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setTeamMembers([\"\", \"\", \"\", \"\"]);\r\n    setErrors([\"\", \"\", \"\", \"\"]); // Clear errors\r\n  };\r\n\r\n  const handleInputChange = (index, value) => {\r\n    const updatedMembers = [...teamMembers];\r\n    updatedMembers[index] = value;\r\n    setTeamMembers(updatedMembers);\r\n    setErrors((prev) => {\r\n      const updatedErrors = [...prev];\r\n      updatedErrors[index] = \"\"; // Reset the error on input change\r\n      return updatedErrors;\r\n    });\r\n  };\r\n\r\n  const validateMembers = async () => {\r\n    const newErrors = [...errors];\r\n    let allValid = true;\r\n\r\n    // Validate each member via backend\r\n    for (let i = 0; i < teamMembers.length; i++) {\r\n      const member = teamMembers[i];\r\n      if (member) {\r\n        try {\r\n          const response = await fetch(\r\n            `http://localhost:8000/api/validate-student/?username=${member}`,\r\n            {\r\n              method: \"GET\",\r\n              credentials: \"include\",\r\n            }\r\n          );\r\n          const data = await response.json();\r\n          if (!data.exists) {\r\n            newErrors[i] = `Student ${member} does not exist.`;\r\n            allValid = false;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error validating student:\", error);\r\n        }\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return allValid;\r\n  };\r\n\r\n  const handleSubmitTeam = async () => {\r\n    // Ensure the logged-in user is added to the team if not already included\r\n    if (!teamMembers.includes(loggedInUser)) {\r\n      // If the logged-in user has not typed their name, throw an error\r\n      alert(\"You must include your name in the team list.\");\r\n      return; // Stop the submission\r\n    }\r\n  \r\n    const isValid = await validateMembers();\r\n  \r\n    if (!isValid) {\r\n      alert(\"Please fix the errors before submitting.\");\r\n      return;\r\n    }\r\n  \r\n    const formData = new FormData();\r\n    formData.append(\"project_id\", selectedProject.id);\r\n  \r\n    // Remove the logged-in user from the teamMembers array check, as it's handled by the backend.\r\n    teamMembers.forEach((member, index) => {\r\n      if (member) {\r\n        formData.append(`member${index + 1}`, member);\r\n      }\r\n    });\r\n  \r\n    fetch(\"http://localhost:8000/api/create-team/\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"X-CSRFToken\": document.cookie.match(/csrftoken=([^;]+)/)?.[1], // Include CSRF token\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          alert(\"Team created successfully!\");\r\n          addStudentProject(selectedProject);\r\n          closeModal();\r\n        } else {\r\n          console.error(\"Error:\", data.message);\r\n          alert(\"Failed to create team.\");\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error:\", error));\r\n  };\r\n  \r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h1>Projects for {username}</h1>\r\n      <div>\r\n        {projects.map((project) => (\r\n          <div\r\n            key={project.id}\r\n            style={{\r\n              margin: \"10px 0\",\r\n              padding: \"10px\",\r\n              border: \"1px solid #ccc\",\r\n            }}\r\n          >\r\n            <h2>{project.name}</h2>\r\n            <p>{project.description}</p>\r\n            <button onClick={() => openModal(project)}>Make Team</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Modal for Team Input */}\r\n      <Modal isOpen={isModalOpen} onRequestClose={closeModal} contentLabel=\"Team Modal\">\r\n        <h2>Create Team for {selectedProject?.name}</h2>\r\n        {[0, 1, 2, 3].map((index) => (\r\n          <div key={index}>\r\n            <label>Team Member {index + 1}:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={teamMembers[index]}\r\n              onChange={(e) => handleInputChange(index, e.target.value)}\r\n            />\r\n            {errors[index] && <p style={{ color: \"red\" }}>{errors[index]}</p>}\r\n          </div>\r\n        ))}\r\n        <button onClick={handleSubmitTeam}>Submit Team</button>\r\n        <button onClick={closeModal}>Close</button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}