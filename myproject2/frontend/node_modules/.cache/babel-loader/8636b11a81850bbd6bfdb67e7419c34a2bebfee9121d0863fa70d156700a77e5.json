{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vssns\\\\Downloads\\\\PMP\\\\myproject2\\\\frontend\\\\src\\\\components\\\\ProjectList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport Modal from \"react-modal\"; // Modal library\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { StudentContext } from \"./StudentContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectList() {\n  _s();\n  const {\n    username\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    studentProjects,\n    addStudentProject\n  } = useContext(StudentContext);\n  const [projects, setProjects] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [teamMembers, setTeamMembers] = useState([\"\", \"\", \"\", \"\"]); // 4 fields for team members\n  const [errors, setErrors] = useState([\"\", \"\", \"\", \"\"]); // To track input errors\n  const [loggedInUser, setLoggedInUser] = useState(\"\"); // Track the logged-in user\n\n  useEffect(() => {\n    // You can pass the logged-in user's username here\n    const usernameFromStorage = localStorage.getItem(\"username\"); // Adjust according to where you get the logged-in user's username\n    setLoggedInUser(usernameFromStorage || \"\"); // Set it to an empty string if not found\n\n    fetch(`http://localhost:8000/api/view-projects/${username}/`, {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(response => response.json()).then(data => {\n      if (data.status === \"success\") {\n        setProjects(data.projects);\n      } else {\n        console.error(\"Error fetching projects:\", data.message);\n      }\n    }).catch(error => console.error(\"Network error:\", error));\n  }, [username]);\n  const openModal = project => {\n    setSelectedProject(project);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setTeamMembers([\"\", \"\", \"\", \"\"]);\n    setErrors([\"\", \"\", \"\", \"\"]); // Clear errors\n  };\n  const handleInputChange = (index, value) => {\n    const updatedMembers = [...teamMembers];\n    updatedMembers[index] = value;\n    setTeamMembers(updatedMembers);\n    setErrors(prev => {\n      const updatedErrors = [...prev];\n      updatedErrors[index] = \"\"; // Reset the error on input change\n      return updatedErrors;\n    });\n  };\n  const validateMembers = async () => {\n    const newErrors = [...errors];\n    let allValid = true;\n\n    // Validate each member via backend\n    for (let i = 0; i < teamMembers.length; i++) {\n      const member = teamMembers[i];\n      if (member) {\n        try {\n          const response = await fetch(`http://localhost:8000/api/validate-student/?username=${member}`, {\n            method: \"GET\",\n            credentials: \"include\"\n          });\n          const data = await response.json();\n          if (!data.exists) {\n            newErrors[i] = `Student ${member} does not exist.`;\n            allValid = false;\n          }\n        } catch (error) {\n          console.error(\"Error validating student:\", error);\n        }\n      }\n    }\n    setErrors(newErrors);\n    return allValid;\n  };\n  const handleSubmitTeam = async () => {\n    var _document$cookie$matc;\n    // Ensure the logged-in user is added to the team if not already included\n    if (!teamMembers.includes(loggedInUser)) {\n      // If the logged-in user has not typed their name, throw an error\n      alert(\"You must include your name in the team list.\");\n      return; // Stop the submission\n    }\n    const isValid = await validateMembers();\n    if (!isValid) {\n      alert(\"Please fix the errors before submitting.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"project_id\", selectedProject.id);\n\n    // Remove the logged-in user from the teamMembers array check, as it's handled by the backend.\n    teamMembers.forEach((member, index) => {\n      if (member) {\n        formData.append(`member${index + 1}`, member);\n      }\n    });\n    fetch(\"http://localhost:8000/api/create-team/\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n      headers: {\n        \"X-CSRFToken\": (_document$cookie$matc = document.cookie.match(/csrftoken=([^;]+)/)) === null || _document$cookie$matc === void 0 ? void 0 : _document$cookie$matc[1] // Include CSRF token\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        alert(\"Team created successfully!\");\n        addStudentProject(selectedProject);\n        closeModal();\n      } else {\n        console.error(\"Error:\", data.message);\n        alert(\"Failed to create team.\");\n      }\n    }).catch(error => console.error(\"Error:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      backgroundColor: \"white\"\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Projects Of \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"10px 0\",\n          padding: \"10px\",\n          border: \"1px solid #ccc\",\n          width: \"80%\",\n          // Reduce the width of the project card\n          maxWidth: \"400px\",\n          // Optional: set a max width\n          backgroundColor: \"white\" // Set project card background to white\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: project.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: project.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => openModal(project),\n          children: \"Make Team\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, project.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Team Modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Create Team for \", selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), [0, 1, 2, 3].map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Team Member \", index + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: teamMembers[index],\n          onChange: e => handleInputChange(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), errors[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: errors[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 31\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitTeam,\n        children: \"Submit Team\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectList, \"KAbZLitiFSmayqFPQQ6EZFdPZgE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProjectList;\nexport default ProjectList;\nvar _c;\n$RefreshReg$(_c, \"ProjectList\");","map":{"version":3,"names":["React","useState","useContext","useEffect","Modal","useParams","useNavigate","StudentContext","jsxDEV","_jsxDEV","ProjectList","_s","username","navigate","studentProjects","addStudentProject","projects","setProjects","isModalOpen","setIsModalOpen","selectedProject","setSelectedProject","teamMembers","setTeamMembers","errors","setErrors","loggedInUser","setLoggedInUser","usernameFromStorage","localStorage","getItem","fetch","method","credentials","then","response","json","data","status","console","error","message","catch","openModal","project","closeModal","handleInputChange","index","value","updatedMembers","prev","updatedErrors","validateMembers","newErrors","allValid","i","length","member","exists","handleSubmitTeam","_document$cookie$matc","includes","alert","isValid","formData","FormData","append","id","forEach","body","headers","document","cookie","match","success","style","padding","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","map","margin","border","width","maxWidth","name","description","onClick","isOpen","onRequestClose","contentLabel","type","onChange","e","target","color","_c","$RefreshReg$"],"sources":["C:/Users/vssns/Downloads/PMP/myproject2/frontend/src/components/ProjectList.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport Modal from \"react-modal\"; // Modal library\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { StudentContext } from \"./StudentContext\";\r\n\r\nfunction ProjectList() {\r\n  const { username } = useParams();\r\n  const navigate = useNavigate();\r\n  const { studentProjects, addStudentProject } = useContext(StudentContext);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [teamMembers, setTeamMembers] = useState([\"\", \"\", \"\", \"\"]); // 4 fields for team members\r\n  const [errors, setErrors] = useState([\"\", \"\", \"\", \"\"]); // To track input errors\r\n  const [loggedInUser , setLoggedInUser ] = useState(\"\"); // Track the logged-in user\r\n\r\n  useEffect(() => {\r\n    // You can pass the logged-in user's username here\r\n    const usernameFromStorage = localStorage.getItem(\"username\"); // Adjust according to where you get the logged-in user's username\r\n    setLoggedInUser (usernameFromStorage || \"\"); // Set it to an empty string if not found\r\n\r\n    fetch(`http://localhost:8000/api/view-projects/${username}/`, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.status === \"success\") {\r\n          setProjects(data.projects);\r\n        } else {\r\n          console.error(\"Error fetching projects:\", data.message);\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Network error:\", error));\r\n  }, [username]);\r\n\r\n  const openModal = (project) => {\r\n    setSelectedProject(project);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setTeamMembers([\"\", \"\", \"\", \"\"]);\r\n    setErrors([\"\", \"\", \"\", \"\"]); // Clear errors\r\n  };\r\n\r\n  const handleInputChange = (index, value) => {\r\n    const updatedMembers = [...teamMembers];\r\n    updatedMembers[index] = value;\r\n    setTeamMembers(updatedMembers);\r\n    setErrors((prev) => {\r\n      const updatedErrors = [...prev];\r\n      updatedErrors[index] = \"\"; // Reset the error on input change\r\n      return updatedErrors;\r\n    });\r\n  };\r\n\r\n  const validateMembers = async () => {\r\n    const newErrors = [...errors];\r\n    let allValid = true;\r\n\r\n    // Validate each member via backend\r\n    for (let i = 0; i < teamMembers.length; i++) {\r\n      const member = teamMembers[i];\r\n      if (member) {\r\n        try {\r\n          const response = await fetch(\r\n            `http://localhost:8000/api/validate-student/?username=${member}`,\r\n            {\r\n              method: \"GET\",\r\n              credentials: \"include\",\r\n            }\r\n          );\r\n          const data = await response.json();\r\n          if (!data.exists) {\r\n            newErrors[i] = `Student ${member} does not exist.`;\r\n            allValid = false;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error validating student:\", error);\r\n        }\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return allValid;\r\n  };\r\n\r\n  const handleSubmitTeam = async () => {\r\n    // Ensure the logged-in user is added to the team if not already included\r\n    if (!teamMembers.includes(loggedInUser )) {\r\n      // If the logged-in user has not typed their name, throw an error\r\n      alert(\"You must include your name in the team list.\");\r\n      return; // Stop the submission\r\n    }\r\n  \r\n    const isValid = await validateMembers();\r\n  \r\n    if (!isValid) {\r\n      alert(\"Please fix the errors before submitting.\");\r\n      return;\r\n    }\r\n  \r\n    const formData = new FormData();\r\n    formData.append(\"project_id\", selectedProject.id);\r\n  \r\n    // Remove the logged-in user from the teamMembers array check, as it's handled by the backend.\r\n    teamMembers.forEach((member, index) => {\r\n      if (member) {\r\n        formData.append(`member${index + 1}`, member);\r\n      }\r\n    });\r\n  \r\n    fetch(\"http://localhost:8000/api/create-team/\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"X-CSRFToken\": document.cookie.match(/csrftoken=([^;]+)/)?.[1], // Include CSRF token\r\n      },\r\n    })\r\n \r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          alert(\"Team created successfully!\");\r\n          addStudentProject(selectedProject);\r\n          closeModal();\r\n        } else {\r\n          console.error(\"Error:\", data.message);\r\n          alert(\"Failed to create team.\");\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error:\", error));\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", backgroundColor: \"white\" }}> {/* Set background color to white */}\r\n      <h1>Projects Of {username}</h1>\r\n      <div>\r\n        {projects.map((project) => (\r\n          <div\r\n            key={project.id}\r\n            style={{\r\n              margin: \"10px 0\",\r\n              padding: \"10px\",\r\n              border: \"1px solid #ccc\",\r\n              width: \"80%\", // Reduce the width of the project card\r\n              maxWidth: \"400px\", // Optional: set a max width\r\n              backgroundColor: \"white\", // Set project card background to white\r\n            }}\r\n          >\r\n            <h2>{project.name}</h2>\r\n            <p>{project.description}</p>\r\n            <button onClick={() => openModal(project)}>Make Team</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Modal for Team Input */}\r\n      <Modal isOpen={isModalOpen} onRequestClose={closeModal} contentLabel=\"Team Modal\">\r\n        <h2>Create Team for {selectedProject?.name}</h2>\r\n        {[0, 1, 2, 3].map((index) => (\r\n          <div key={index}>\r\n            <label>Team Member {index + 1}:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={teamMembers[index]}\r\n              onChange={(e) => handleInputChange(index, e.target.value)}\r\n            />\r\n            {errors[index] && <p style={{ color: \"red\" }}>{errors[index]}</p>}\r\n          </div>\r\n        ))}\r\n        <button onClick={handleSubmitTeam}>Submit Team</button>\r\n        <button onClick={closeModal}>Close</button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}